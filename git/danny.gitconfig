[danny]
	difftool = VSCode
[user]
	name = Danny Warren
[core]
	editor = code --wait --new-window
# Not supported by the mob tool as of 2021-04-29
# [status]
# 	short = true
# 	branch = true
[url "https://"]
	insteadOf = git://
[url "https://github.com/"]
	insteadOf = git@github.com:
[push]
	default = simple
[pull]
	rebase = true
[fetch]
	prune = true
[difftool]
	prompt = false
[mergetool]
	keepBackup = false
[difftool "VSCode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[mergetool "VSCode"]
	cmd = code --wait --merge $LOCAL $REMOTE $BASE $MERGED
[alias]
	# LOG
	logf = log -10 --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset   %C(black bold)%ad%Creset   %C(green)%<(12)%an%Creset %s'
	logfn = log -10 --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset   %C(black bold)%ad%Creset   %C(green)%an%Creset%n          %s'
	lg = log --graph --decorate -30 --all --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s'
	lga = log --graph --decorate -30 --all --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset %C(green)%<(12)%an%Creset%C(auto)%d %s'
	lgn = log --graph --decorate -30 --all --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset %C(green)%an%Creset%C(auto)%d%n        %C(white bold)%s%Creset'
	lgb = log --graph --decorate -30 --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s'
	lgab = log --graph --decorate -30 --topo-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset %C(green)%<(12)%an%Creset%C(auto)%d %s'
	# STATUS
	s = status
	ss = show --name-status --abbrev-commit
	# COMMIT
	all = add -A
	c = commit -m
	ca = commit --amend --no-edit
	cae = commit --amend
	caa = commit --amend --reset-author --no-edit
	cc = commit -c
	# WIP
	commitwip = !git add -A && git commit -m WIP
	wipcommit = commitwip
	cw = commitwip
	wc = commitwip
	resumewip = "!if [ \"$(git log -1 --pretty=format:%B)\" == \"WIP\" ]; then git reset HEAD~1; else echo 'The last commit was not \"WIP\"'; fi"
    wipresume = resumewip
	rw = resumewip
	wr = resumewip
	# DIFF
	d = difftool
	diffall = "!f() { for filename in $(git diff --name-only $*); do git difftool $* $filename & done }; f"
	da = diffall
	diffprevious = difftool HEAD~ HEAD
	dp = diffprevious
	diffallprevious = "!f() { for filename in $(git diff --name-only HEAD~ HEAD); do git difftool HEAD~ HEAD $filename & done }; f"
	dap = diffallprevious
	# REBASE
	ri = rebase -i
	rc = rebase --continue
	ra = rebase --abort
	# MERGE
	m = mergetool
	# BRANCH CONTROL
	co = checkout
	cob = checkout -b
	b = branch -a
	pushu = "!git push -u origin $(git branch --show-current)"
	pushnv = push --no-verify
	del = branch -d
	delf = branch -D
	delorigin = push origin --delete
	# REMOTES
	listremotes = remote -v
	lr = listremotes 
	up = remote add upstream
	syncforkmaster = "!git fetch upstream && git co master && git merge upstream/master"
	syncforkmain = "!git fetch upstream && git co main && git merge upstream/main"
	# UNKNOWN
	pr = !start $(echo $(git config remote.origin.url) | sed s/\\\\.git//)/pull/new/$(git branch --show-current)
	unsynced = log --branches --not --remotes --no-walk --oneline
	site = !start $(git config remote.origin.url)
